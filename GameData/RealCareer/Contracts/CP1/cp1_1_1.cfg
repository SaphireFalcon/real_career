CONTRACT_TYPE
{
  name = CP1_1_1
  title = CP1 - First launch
  group = CP1
  sortKey = CP1_1_1
  agent = SpaceK_CP1
  
  description = Congratulations with your appointment to the head of <agency>. You have received a little bit of funding and you have to proof now that you can successfully launch a rocket. Don't worry if the rocket crashes after that.
  
  // Optional
  notes = You need to launch a rocket and reach an altitude of at least 5km. Also make sure you don't fail, your boss won't like that!

  // The contract synopsis appears in bold.
  synopsis = Launch your first rocket.

  completedMessage = Congratulations! That was fun!

  // Contract min/max expiry in days.  If both are set to 0.0, it will result in a contract that never expires.
  // Default = 5.0 and 100.0 days, respectively
  minExpiry = 0.0
  maxExpiry = 0.0
  // Contract deadline in days.  Default is no deadline.
  deadline = 10

  // Controls for whether a contract can be declined or cancelled, default is true for both
  cancellable = false
  declinable = false

  // Prestige.
  //     Trivial
  //     Significant
  //     Exceptional
  prestige = Trivial

  // Target Celestial body
  // Default = null (no celestial body)
  targetBody = Kerbin

  // The maximum number of times this contract type can be completed (0 being unlimited).
  // Default = 0
  maxCompletions = 1

  // The maximum instances of this contract that can be active at one time. Default = 4 (unless maxCompletions is set).
  maxSimultaneous = 1

  // Contract rewards.  Note that advanceFunds are automatically added to the failureFunds.
  rewardScience = 1.0
  rewardReputation = 1.0
  rewardFunds = 500.0
  failureReputation = 1.0
  failureFunds = 0.0
  advanceFunds = 500.0

  //  Completion criteria
  PARAMETER
  {
    name = reach_alt
    type = ReachState
    minAltitude = 5000
    disableOnStateChange = true
  }
  PARAMETER
  {
    name = min_speed
    type = ReachState
    minSpeed = 250
    disableOnStateChange = true
  }
  PARAMETER
  {
    name = need_flat_probe
    type = PartValidation
    disableOnStateChange = false //  Need to keep it until the end
    //  specific part: inline probe
    part = RC_InlineProbe_035
  }
}