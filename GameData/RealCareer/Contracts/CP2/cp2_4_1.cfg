CONTRACT_TYPE:NEEDS[SCANsat]
{
  name = CP2_4_1
  title = CP2.4.1 - Mapping satelite
  group = CP2
  sortKey = CP2_4_1
  agent = SpaceK_CP2
  
  description = Kom Kom and Kookle approached the sales department with a request if we would be able to create maps from satelite images. Our engineers already had an altimeter sensor developed to makes sure we wouldn't crash into the ground when landing.
  
  // Optional
  notes = Launch a satelite into orbit with the alitmeter sensor. Note: Remember one can visualize the satelites path with the scansat map. Here the orange line on the equator is passing from norht to south and the blue one from south to north. The altimeter scanner also works on the dark side, so find the right orbital period where there are no gaps between passes. This is more difficult compared to the multispectral scanner, as the edge of the FoV needs to be in the middle of the orange and blue lines.
  // circular orbit with period of 40m39s has a spacing of 12 parts in between two passes. -> 7d
  //    remaining small gaps -> fixable (partly) with inclination
  //    shifted a little like 40m40s works very well too
  // circular orbit with period of 41m38s5 has a spacing of 16 parts in between two passes -> 8d
  // circular orbit with period of 41m35s has a spacing of 11 parts in between two passes. -> 7d (small gaps)
  // circular orbit with period of 43m38s has a spacing of 13 parts in between two passes. -> 7d (small gaps)

  // The contract synopsis appears in bold.
  synopsis = Build a satelite and launch it into a polar orbit.

  completedMessage = Congratulations, now we'll never get lost, if we could read a map... Note: Don't forget the science!

  // Contract min/max expiry in days. If both are set to 0.0, it will result in a contract that never expires.
  // Default = 5.0 and 100.0 days, respectively
  minExpiry = 0.0
  maxExpiry = 0.0
  // Contract deadline in days.  Default is no deadline.
  deadline = 10

  // Controls for whether a contract can be declined or cancelled, default is true for both
  cancellable = false
  declinable = false

  // Prestige.
  //     Trivial
  //     Significant
  //     Exceptional
  prestige = Significant

  // Target Celestial body
  // Default = null (no celestial body)
  targetBody = Kerbin

  // The maximum number of times this contract type can be completed (0 being unlimited).
  // Default = 0
  maxCompletions = 1

  // The maximum instances of this contract that can be active at one time. Default = 4 (unless maxCompletions is set).
  maxSimultaneous = 1

  // Contract rewards.  Note that advanceFunds are automatically added to the failureFunds.
  rewardScience = 24.0
  rewardReputation = 10.0
  rewardFunds = 80000.0
  failureReputation = 10.0
  failureFunds = 0.0
  advanceFunds = 16000.0

  PARAMETER
  {
    name = get_inclined_orbit
    type = Orbit
    situation  = ORBITING
    minAltitude = 70000
    maxAltitude = 250000
    minInclination = 75.0 // is it -90 t/m 90 deg?
    maxInclination = 90.0
    disableOnStateChange = false //  Remove when achieved
  }
  PARAMETER
  {
    name = timer_day_coverage
    type = Timer
    duration  = 6d 3h
    parameter = get_inclined_orbit
    timerType = PARAMETER_COMPLETION // seems to start counting at launch...
    failContract = true // fail the contract or only the parameter
  }
  PARAMETER:NEEDS[SCANsat]
  {
    name = scansat_coverage
    type = SCANsatCoverage
    coverage = 95.0
    scanType = AltimetryLoRes
  }
  
  REQUIREMENT
  {
    name = completed_cp1_7_5
    type = CompleteContract
    contractType = CP1_7_5
  }
  REQUIREMENT
  {
    name = tech_researched
    type = TechResearched
    tech = basicScience
  }
}