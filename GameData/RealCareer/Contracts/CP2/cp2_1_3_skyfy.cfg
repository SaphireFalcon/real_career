CONTRACT_TYPE
{
  name = CP2_1_3_skyfy
  title = CP2.1.3 - SkyFy Satelite TV
  group = CP2
  sortKey = CP2_1_3
  agent = SkyFy //[ Kisney, KBO, SkyFy ].Random()
  
  description = The SkyFy TV station is very impressed with your satellites. People in neighbouring countries also want to receive their channels. One of these countries is an island to the south.

  // Optional
  notes = Your scientists tell you that this island is located below the 45 degree lattitude. Therefore, you can't use a satellite in standard stationary orbit. You need to find an alternate solution to this. Note: Look on the internet for something like the Tundra, Molniya, and Quasi-Zenith orbits to find a solution to this problem. Side-note: Make sure the receivers are aimed at the satelite(s)

  // The contract synopsis appears in bold.
  synopsis = Launch one or more satellite(s) that can transmit the tv channels of the tv station to multiple locations.

  completedMessage = Congratulations, now all those islanders can enjoying their favourite TV shows.

  // Contract min/max expiry in days.  If both are set to 0.0, it will result in a contract that never expires.
  // Default = 5.0 and 100.0 days, respectively
  minExpiry = 0.0
  maxExpiry = 0.0
  // Contract deadline in days.  Default is no deadline.
  deadline = 15

  // Controls for whether a contract can be declined or cancelled, default is true for both
  cancellable = false
  declinable = false

  // Prestige.
  //     Trivial
  //     Significant
  //     Exceptional
  prestige = Trivial

  // Target Celestial body
  // Default = null (no celestial body)
  targetBody = Kerbin

  // The maximum number of times this contract type can be completed (0 being unlimited).
  // Default = 0
  maxCompletions = 1
  //  ToDo: figure out how to make sure this contract is not non-stop repeated

  // The maximum instances of this contract that can be active at one time. Default = 4 (unless maxCompletions is set).
  maxSimultaneous = 1

  // Contract rewards.  Note that advanceFunds are automatically added to the failureFunds.
  rewardScience = 0.0
  rewardReputation = 10.0
  rewardFunds = 210000.0
  failureReputation = 20.0
  failureFunds = 0.0
  advanceFunds = 40000.0
  
  //  Spawn TV station
  BEHAVIOUR
  {
    name = SpawnVessel
    type = SpawnVessel
    deferVesselCreation = true
    VESSEL
    {
      name = SkyFy TV Receiver 12
      craftURL = RealCareer/Vessels/CP2_1_3_TV_receiver.craft
      flagURL = Squad/Flags/default
      vesselType = Base // Unknown
      owned = true // selectable/flyable unless docked -> You need to target the satellite
      targetBody = Kerbin
      lat = -64.97
      lon = 23.92
    }
    VESSEL
    {
      name = SkyFy TV Receiver 13
      craftURL = RealCareer/Vessels/CP2_1_3_TV_receiver.craft
      flagURL = Squad/Flags/default
      vesselType = Base // Unknown
      owned = true // selectable/flyable unless docked -> You need to target the satellite
      targetBody = Kerbin
      lat = -59.20
      lon = 27.83
    }
    VESSEL
    {
      name = SkyFy TV Receiver 14
      craftURL = RealCareer/Vessels/CP2_1_3_TV_receiver.craft
      flagURL = Squad/Flags/default
      vesselType = Base // Unknown
      owned = true // selectable/flyable unless docked -> You need to target the satellite
      targetBody = Kerbin
      lat = -52.65
      lon = 35.70
      
    }
  }
  PARAMETER
  {
    name = group_alt_part
    type = VesselParameterGroup
    duration = 1h
    define = vessel_CP2_1_3_TV_satellite
    dissassociateVesselsOnContractCompletion = false // The license contract should be able to find it again
    dissassociateVesselsOnContractFailure = true
    //dissassociateVesselsOnContractCompletion = true
    //dissassociateVesselsOnContractFailure = true
    //hideVesselName = true
    
    PARAMETER
    {
      name = need_part
      type = PartValidation
      part = RTLongDish1
    }
    PARAMETER:NEEDS[RemoteTech]
    {
      name = connected_to_tv_station
      type = VesselConnectivity
      vessel = SkyFy TV Station
      hasConnectivity = true
      disableOnStateChange = false //  Need to keep it until the end
    }
    PARAMETER:NEEDS[RemoteTech]
    {
      name = connected_to_receiver_12
      type = VesselConnectivity
      vessel = SkyFy TV Receiver 12
      hasConnectivity = true
      disableOnStateChange = false //  Need to keep it until the end
    }
    PARAMETER:NEEDS[RemoteTech]
    {
      name = connected_to_receiver_13
      type = VesselConnectivity
      vessel = SkyFy TV Receiver 13
      hasConnectivity = true
      disableOnStateChange = false //  Need to keep it until the end
    }
    PARAMETER:NEEDS[RemoteTech]
    {
      name = connected_to_receiver_14
      type = VesselConnectivity
      vessel = SkyFy TV Receiver 14
      hasConnectivity = true
      disableOnStateChange = false //  Need to keep it until the end
    }
  }
  
  REQUIREMENT
  {
    name = completed_CP2_1_2_skyfy
    type = CompleteContract
    contractType = CP2_1_2_skyfy
  }
  REQUIREMENT
  {
    name = completed_CP1_7_5
    type = CompleteContract
    contractType = CP1_7_5
  }
}
