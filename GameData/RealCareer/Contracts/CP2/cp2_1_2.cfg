CONTRACT_TYPE
{
  name = CP2_1_1_skyfy
  title = CP2.1.1 - Satelite TV
  group = CP1
  sortKey = CP2_1_1
  agent = SkyFy //[ Kisney, KBO, SkyFy ].Random()
  
  description = The SkyFy TV station is very impressed with your satellite. Their customers report very good service and higher image quality compared to other TV channels that are still broadcasted by land antenna's. Therefore, they want you to cover a larger area. Therefore, they have selected a few key areas they want you to cover.

  // Optional
  notes = The client wants you to cover a larger area. Unfortunately, there is no dish that can cover a higher surface area while maintaining the high bandwidth needed for TV transmissions. You should find another solution to this.

  // The contract synopsis appears in bold.
  synopsis = Launch one or more satellite(s) that can transmit the tv channels of the tv station to multiple locations.

  completedMessage = Congratulations, we finally got a rocket into orbit and made it back safely. Now you could send kerbonauts into space, but also run experiments that need to return to Kerbin.

  // Contract min/max expiry in days.  If both are set to 0.0, it will result in a contract that never expires.
  // Default = 5.0 and 100.0 days, respectively
  minExpiry = 0.0
  maxExpiry = 0.0
  // Contract deadline in days.  Default is no deadline.
  deadline = 15

  // Controls for whether a contract can be declined or cancelled, default is true for both
  cancellable = false
  declinable = false

  // Prestige.
  //     Trivial
  //     Significant
  //     Exceptional
  prestige = Trivial

  // Target Celestial body
  // Default = null (no celestial body)
  targetBody = Kerbin

  // The maximum number of times this contract type can be completed (0 being unlimited).
  // Default = 0
  maxCompletions = 5
  //  ToDo: figure out how to make sure this contract is not non-stop repeated

  // The maximum instances of this contract that can be active at one time. Default = 4 (unless maxCompletions is set).
  maxSimultaneous = 1

  // Contract rewards.  Note that advanceFunds are automatically added to the failureFunds.
  rewardScience = 0.0
  rewardReputation = 10.0
  rewardFunds = 150000.0
  failureReputation = 1.0
  failureFunds = 0.0
  advanceFunds = 15000.0
  
  //  The TV station should still be there (or is it destroyed?)
  //  Spawn TV station
  //BEHAVIOUR
  //{
  //  name = SpawnVessel
  //  type = SpawnVessel
  //  VESSEL
  //  {
  //    name = SkyFy TV Station
  //    craftURL = RealCareer/Vessels/CP2_1_1_TV_station.craft
  //    flagURL = Squad/Flags/satellite
  //    vesselType = Base
  //    owned = true // selectable/flyable unless docked -> You need to target the satellite
  //    targetBody = Kerbin
  //    lat = 90
  //    lon = 0
  //  }
  //}

  //  Spawn multiple receivers
  //  https://wiki.kerbalspaceprogram.com/images/a/a9/Kerbin_heightmap.jpg
  BEHAVIOUR
  {
    name = SpawnVessel
    type = SpawnVessel
    VESSEL
    {
      name = CP2_1_1-SkyFy_TV_Receiver_15_30
      craftURL = RealCareer/Vessels/CP2_1_1_TV_station.craft
      flagURL = Squad/Flags/satellite
      vesselType = Base
      owned = true // selectable/flyable unless docked -> You need to target the satellite
      targetBody = Kerbin
      lat = 30
      lon = 15
    }
  }

  PARAMETER
  {
    name = group_alt_part
    type = VesselParameterGroup
    duration = 6h
    define = vessel_CP2_1_1_TV_satellite
    dissassociateVesselsOnContractCompletion = true
    dissassociateVesselsOnContractFailure = true
    //hideVesselName = true
    
    PARAMETER
    {
      name = need_part
      type = PartValidation
      // specific part: antenna
      part = RTLongDish1
    }
    PARAMETER:NEEDS[RemoteTech]
    {
      name = connected_to_tv_station
      type = VesselConnectivity
      vessel = SkyFy TV Station
      hasConnectivity = true
      disableOnStateChange = false //  Need to keep it until the end
    }
    PARAMETER:NEEDS[RemoteTech]
    {
      name = connected_to_tv_receiver
      type = VesselConnectivity
      vessel = CP2_1_1 SkyFy TV Receiver
      hasConnectivity = true
      disableOnStateChange = false //  Need to keep it until the end
    }
  }
  
  REQUIREMENT
  {
    name = completed_CP2_1_1_skyfy
    type = CompleteContract
    contractType = CP2_1_1_skyfy
  }
}
