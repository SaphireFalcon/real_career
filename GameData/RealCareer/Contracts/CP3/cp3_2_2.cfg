CONTRACT_TYPE
{
  name = CP3_2_2
  title = CP3.2.2 - launch pod into orbit
  group = CP3
  sortKey = CP3_2_2
  agent = SpaceK_CP3
  
  description = Great! All tests have passed successfully. Next, launch the pod into orbit and stay in orbit for one day and then return safely.

  // Optional
  notes = Launch the pod into space. Note: Do EVA reports over the various biomes to get more science.

  // The contract synopsis appears in bold.
  synopsis = Launch the pod into space.

  completedMessage = Congratulations, we send successfully a Kerbonaut into space.

  // Contract min/max expiry in days. If both are set to 0.0, it will result in a contract that never expires.
  // Default = 5.0 and 100.0 days, respectively
  minExpiry = 0.0
  maxExpiry = 0.0
  // Contract deadline in days.  Default is no deadline.
  deadline = 10

  // Controls for whether a contract can be declined or cancelled, default is true for both
  cancellable = false
  declinable = false

  // Prestige.
  //     Trivial
  //     Significant
  //     Exceptional
  prestige = Trivial

  // Target Celestial body
  // Default = null (no celestial body)
  targetBody = Kerbin

  // The maximum number of times this contract type can be completed (0 being unlimited).
  // Default = 0
  maxCompletions = 1
  //  ToDo: Make it repeatable or make multiple contract copies
  //  ToDo: figure out how to make sure this contract is not non-stop repeated

  // The maximum instances of this contract that can be active at one time. Default = 4 (unless maxCompletions is set).
  maxSimultaneous = 1

  // Contract rewards.  Note that advanceFunds are automatically added to the failureFunds.
  rewardScience = 10.0
  rewardReputation = 5.0
  rewardFunds = 50000.0
  failureReputation = 5.0
  failureFunds = 0.0
  advanceFunds = 30000.0
  
  PARAMETER
  {
    name = group_alt_part
    type = VesselParameterGroup
    duration = 1d
    define = vessel_CP3_2_2
    
    PARAMETER
    {
      name = need_part
      type = PartValidation
      part = mk1pod_v2
    }
    PARAMETER
    {
      name = has_crew
      type = HasCrew

      // The type of trait required.  Valid values are:
      //     Pilot
      //     Engineer
      //     Scientist
      trait = Pilot
      minCrew = 1
    }
    PARAMETER
    {
      name = reach_alt
      type = ReachState
      minAltitude = 70000
      maxAltitude = 80000
      disableOnStateChange = true
    }
  }
  PARAMETER
  {
    name = recover_vessel
    type = RecoverVessel
  }
  
  REQUIREMENT
  {
    name = completed_cp3_2_1
    type = CompleteContract
    contractType = CP3_2_1
  }
}
